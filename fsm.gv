digraph finite_state_machine 


{
    
    //rankdir=LR;
    size="7.3, 11.2"
    ratio= "compress"  
    page="8.3,11.7"
    #sccmap
    #unflatten
    #gvpr
    #constraint=false
    overlap="false"


    node [shape = point ]; qi; // tuto si definoval iba pre qi ze je point
    node [shape = doublecircle, fontsize = 23, color  = blue, width = 3];S_START;
    node [shape = doublecircle, fontsize = 26, color  = red, width = 2];ERR;
    node [shape = doublecircle, fontsize = 15, color  = green, width = 1.2];{
    												SEMICOLON_SMBL, LEFT_COLUMN_SMBL, RIGHT_COLUMN_SMBL,
    												LEFT_VIN_COLUMN_SMBL, RIGHT_VIN_COLUMN_SMBL, COMMA_SMBL,
    												PLUS_SMBL, MINUS_SMBL, MULTIPLY_SMBL, END_DOUBLE, END_NUMBER,
       												END_OF_FILE, END_KW_OR_ID, LESS_SMBL, LESS_EQUAL,
    												DOUBLE_R_ARR, DOUBLE_L_ARR,	MORE_SMBL, MORE_EQUAL, NOT,
    												E_STRING, ASIGNMENT_SMBL,	EQUAL_SMBL,DIVIDE_SMBL, NOT_EQUAL
    											};// ostatne su taketo neda sa nahodou priradit k tomu ako je vyssie ale viac poloziek?
    node [rank=max, shape = circle , fontsize = 14, color =black, width = 1 ]; 

################################################################################
# These are end states 
    
	
	S_START -> S_START						[ label = "\'[\\\ \\n\\t]\'" , fontsize = 24 ];		
		S_START -> NOT						[ label = "\'[!]\'" , fontsize = 25 ];
			NOT -> NOT_EQUAL					[ label = "\'[=]\'" , fontsize = 25  ];
			NOT -> NOT							[ label = "\'ELSE\'" , fontsize = 24 ];
		S_START -> R_ARROW					[ label = "\'[>]\'" , fontsize = 25 ];
			R_ARROW -> MORE_SMBL				[ label = "\'ELSE\'" , fontsize = 24 ];
			R_ARROW -> MORE_EQUAL				[ label = "\'[=]\'" , fontsize = 25 ];
			R_ARROW -> DOUBLE_R_ARR				[ label = "\'[>]\'" , fontsize = 25 ];
		S_START -> L_ARROW					[ label = "\'[<]\'" ,fontsize = 25  ];
			L_ARROW -> LESS_SMBL				[ label = "\'ELSE\'", fontsize = 24  ];
			L_ARROW -> LESS_EQUAL				[ label = "\'[=]\'" , fontsize = 25  ];
			L_ARROW -> DOUBLE_L_ARR				[ label = "\'[<]\'" , fontsize = 25  ];
		S_START -> KW_OR_ID					[ label = "\'[A-z_]\'", fontsize = 24  ];
			KW_OR_ID -> ERR					[ label = "\'ELSE\'", fontsize = 24  ];
			KW_OR_ID -> KW_OR_ID			[ label = "\'[A-z_0-9]\'", fontsize = 24  ];
			KW_OR_ID -> END_KW_OR_ID		[ label = "\'ELSE\'" , fontsize = 24 ];	
		DIV_OR_COMM -> DIVIDE_SMBL			[ label = "\'ELSE\'", fontsize = 24  ];	
		DIV_OR_COMM -> LINE_COMM			[ label = "\'[/]\'" , fontsize = 25  ];
			LINE_COMM -> LINE_COMM 				[ label = "\'ELSE\'", fontsize = 24  ];
			LINE_COMM -> S_START				[ label = "\'[\\n]\'" , fontsize = 25  ];
		DIV_OR_COMM -> BLOCK_COMM				[ label = "\'[*]\'" , fontsize = 25  ];
			BLOCK_COMM -> END_BLOCK_COMM		[ label = "\'[*]\'" , fontsize = 25  ];
			BLOCK_COMM -> BLOCK_COMM 			[ label = "\'ELSE\'", fontsize = 24  ];
				END_BLOCK_COMM -> S_START		[ label = "\''[/]'\'" , fontsize = 25  ];
			END_BLOCK_COMM -> BLOCK_COMM 		[ label = "\'ELSE\'", fontsize = 24  ];
		S_STRING -> S_STRING				[ label = "\'[\^\"]\'", fontsize = 24 ];
			S_STRING -> ERR					[ label = "\'ELSE\'", fontsize = 24  ];	
			S_STRING -> S_ESCAPE			[ label = "\'[\\\\]\'", fontsize = 25  ];
				S_ESCAPE -> S_STRING			[ label = "\'[tn\\\\]\'", fontsize = 25 ]
				S_ESCAPE -> ERR					[ label = "\'ELSE\'", fontsize = 24  ];	
				S_ESCAPE -> ESCAPE_X1			[ label = "\'[x]\'", fontsize = 25   ];
					ESCAPE_X1 -> ESCAPE_X2		[ label = "\'[A-z]\'" , fontsize = 24 ];
					ESCAPE_X1 -> ERR 			[ label = "\'ELSE\'" , fontsize = 24 ];
						ESCAPE_X2 -> S_STRING   [ label = "\'[A-z]\'" , fontsize = 24 ];
						ESCAPE_X2 -> ERR 		[ label = "\'ELSE\'" , fontsize = 24 ];	
			S_STRING -> E_STRING				[ label = "\'[\"]\'" , fontsize = 25 ];
		S_START -> EQ_OR_ASIGNMENT				[ label = "\'[=]\'", fontsize = 25 ];
			EQ_OR_ASIGNMENT -> ASIGNMENT_SMBL	[ label = "\'ELSE\'" , fontsize = 24 ];
			EQ_OR_ASIGNMENT -> EQUAL_SMBL		[ label = "\'[=]\'", fontsize = 25  ];
	S_START -> ERR						[ label = "\'ELSE\'" , fontsize = 24 ];
	S_START -> COMMA_SMBL				[ label = "\'[,]\'", fontsize = 25   ];
	S_START -> END_OF_FILE				[ label = "\'EOF\'", fontsize = 24 ];
	S_START -> PLUS_SMBL				[ label = "\'[+]\'" , fontsize = 25  ];
	S_START -> MINUS_SMBL				[ label = "\'[-]\'", fontsize = 25   ];
	S_START -> LEFT_VIN_COLUMN_SMBL		[ label = "\'[{]\'" , fontsize = 25 ];
	S_START -> RIGHT_VIN_COLUMN_SMBL	[ label = "\'[}]\'" , fontsize = 25 ];	
	S_START -> S_STRING 				[ label = "\'[\"]\'" , fontsize = 25 ];
	S_START -> RIGHT_COLUMN_SMBL		[ label = "\'[)]\'" , fontsize = 25 ];
	S_START -> LEFT_COLUMN_SMBL			[ label = "\'[(]\'" , fontsize = 25 ];
	S_START -> DIV_OR_COMM				[ label = "\'[/]\'", fontsize = 25  ];
	S_START -> MULTIPLY_SMBL			[ label = "\'[*]\'" , fontsize = 25 ];
	S_START -> SEMICOLON_SMBL			[ label = "\'[;]\'", fontsize = 25  ];
	S_START -> S_NUMBER 				[ label = "\'[0-9]\'" , fontsize = 24 ];
		S_NUMBER -> S_NUMBER			[ label = "\'[0-9]\'" , fontsize = 24 ];
		S_NUMBER -> END_NUMBER			[ label = "\'ELSE\'" , fontsize = 24 ];	
		S_NUMBER -> EXPONENT			[ label = "\'[eE]\'", fontsize = 24  ];
		S_NUMBER -> D_NUMBER			[ label = "\'[.]\'" fontsize = 25 ];
			D_NUMBER -> FRAC_NUMBER			[ label = "\'[0-9]\'" , fontsize = 24 ];
			D_NUMBER -> ERR					[ label = "\'ELSE\'" , fontsize = 24 ];    
			FRAC_NUMBER -> FRAC_NUMBER			[ label = "\'[0-9]\'", fontsize = 24 ];
			FRAC_NUMBER -> END_DOUBLE		[ label = "\'ELSE\'" , fontsize = 24 ];
			FRAC_NUMBER -> EXPONENT			[ label = "\'[eE]\'" , fontsize = 24 ];
				EXPONENT -> FEX_NUMBER			[ label = "\'[\\\-+0-9]\'", fontsize = 24  ];
				EXPONENT -> ERR					[ label = "\'ELSE\'" , fontsize = 24 ];
					FEX_NUMBER -> FEX_NUMBER		[ label = "\'[0-9]\'" , fontsize = 24 ];
					FEX_NUMBER -> END_DOUBLE		[ label = "\'ELSE\'" , fontsize = 24 ];		
					FEX_NUMBER -> ERR				[ label = "\'ELSE\'" , fontsize = 24 ];
	qi -> S_START;
	{	rank=same qi,S_START }//, NOT, NOT_EQUAL
	//ak vymazem tak povodny stav ako predtym celkom

	{
		rank=same //layer
			S_NUMBER, NOT//, NONOVE
	}

	
	
	{ 	rank=min END_OF_FILE }
	{ 
		rank=same //as EOF ^^^
			END_OF_FILE,
			SEMICOLON_SMBL,
			LEFT_VIN_COLUMN_SMBL, 
			RIGHT_COLUMN_SMBL, 
			RIGHT_VIN_COLUMN_SMBL, 
			LEFT_COLUMN_SMBL,    
			COMMA_SMBL,
			EQ_OR_ASIGNMENT,
			PLUS_SMBL,
			MINUS_SMBL,
			MULTIPLY_SMBL		
	}

	{
		rank=same //layer
			R_ARROW,
			FEX_NUMBER,
			LESS_EQUAL,LESS_SMBL
	}

	{
		rank=same //layer
			L_ARROW,
			DIVIDE_SMBL,
			END_KW_OR_ID
	}

	{
		rank=same //layers
			E_STRING,
			KW_OR_ID,
			END_NUMBER
	}

}
